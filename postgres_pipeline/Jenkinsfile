def wks
def credID

node {
  script {
    wks = "${env.WORKSPACE}"
    if ( wks =~ /production\//) {
        credID = 'vault-approle-prod'
        path = 'secret/EC2/production'
    } else {
        credID = 'vault-approle'
        path = 'secret/EC2'
    }
  }
}

def secrets = [
  [ path: path + '/credentials',
    engineVersion: 2,
    secretValues: [
        [ envVar: 'postgres_IP', vaultKey: 'postgres_IP' ]
    ]
  ],

  [ path: path+ '/credentials',
    engineVersion: 2, \
    secretValues: [
        [ envVar: 'PRIVATE_KEY', vaultKey: 'id_rsa']
    ]
  ],

  [ path: path+ '/credentials',
    engineVersion: 2, \
    secretValues: [
        [ envVar: 'PUB_KEY', vaultKey: 'id_rsa.pub']
    ]
  ],

  [ path: path+ '/credentials',
    engineVersion: 2, \
    secretValues: [
        [ envVar: 'DOCKER_PASSWORD', vaultKey: 'docker_password']
    ]
  ],

  [ path: path+ '/credentials',
    engineVersion: 2, \
    secretValues: [
        [ envVar: 'DOCKER_USERNAME', vaultKey: 'docker_username']
    ]
  ],

]

def configuration = [
  vaultUrl: 'http://192.168.0.131:8200',
  skipSslVerification: 'true',
  vaultCredentialId: credID,
  engineVersion: 2
]

pipeline {

    agent any

    parameters {
        booleanParam(name: 'Postgres_install', description: '(Optional) Install postgres in a container (default: no)')
        booleanParam(name: 'Docker_install', description: '(Optional) Install Docker in a container (default: no)')
    }
    stages {
        stage('Installing Docker') {
            when {
                expression {
                    params.Docker_install == true
                }
            }
            steps {
                withVault([configuration: configuration, vaultSecrets: secrets]) {
                    sh '''
                    #!/bin/bash
                    set +x
                    ansible-playbook -i ./postgres_pipeline/hosts.yml ./postgres_pipeline/docker_playbook.yml --extra-vars="ansible_host=${postgres_IP}"
                    ''' 
                }
            }
        }
        stage('Installing postgres') {
            when {
                expression {
                    params.Postgres_install == true
                }
            }
            steps {
                withVault([configuration: configuration, vaultSecrets: secrets]) {
                    sh '''
                    #!/bin/bash
                    set +x
                    ansible-playbook -i ./postgres_pipeline/hosts.yml ./postgres_pipeline/postgres_playbook.yml --extra-vars="username=${DOCKER_USERNAME} password=${DOCKER_PASSWORD} ansible_host=${postgres_IP}"
                    ''' 
                }
            }
        }
    }
}