def wks
def credID

node {
  script {
    wks = "${env.WORKSPACE}"
    if ( wks =~ /production\//) {
        credID = 'vault-approle-prod'
        path = 'secret/EC2/production'
    } else {
        credID = 'vault-approle'
        path = 'secret/EC2'
    }
  }
}

def secrets = [
  [ path: path + '/credentials',
    engineVersion: 2,
    secretValues: [
        [ envVar: 'AWS_ACCESS_KEY_ID', vaultKey: 'AWS_ACCESS_KEY_ID' ]
    ]
  ],

  [ path: path + '/credentials',
    engineVersion: 2,
    secretValues: [
        [ envVar: 'AWS_SECRET_ACCESS_KEY', vaultKey: 'AWS_SECRET_ACCESS_KEY']
    ]
  ],

  [ path: path+ '/credentials',
    engineVersion: 2, \
    secretValues: [
        [ envVar: 'PUB_KEY', vaultKey: 'id_rsa.pub']
    ]
  ],

//   [ path: path+ '/${ENVIRONMENT}/credentials',
//     engineVersion: 2, \
//     secretValues: [
//       [ envVar: 'ENV_KEY', vaultKey: 'KEY']
//     ]
//   ],

]

def configuration = [
  vaultUrl: 'http://192.168.0.130:8200',
  skipSslVerification: 'true',
  vaultCredentialId: credID,
  engineVersion: 2
]

pipeline {

//   agent {
//       label 'custom-ec2'
//    }
    agent any

  parameters {
    string(name: 'EC2_tag', description: 'Tag Name of the new EC2 instance to deploy', defaultValue: 'postgres')
    booleanParam(name: 'Terraforn_plan', description: '(Optional) Check the terraform plan before applying it (default: no)')
    booleanParam(name: 'Terraforn_destroy', description: '(Optional) Destroy the current instances managed by terraform (default: no)')
    booleanParam(name: 'Store_IP', description: '(Optional) Store the IP address of the postgres instance in Vult (default: no)')
  }
  stages {
    stage("Installing terraform and Ansible") {
      steps {     
        sh'''#!/bin/bash
            ##Install Terraform
            source ./terraform_pipeline/scripts/terraform_install.sh
            binaries::installTerraform

            source ./terraform_pipeline/scripts/ansible_install.sh
            binaries::installAnsible
        '''
       }
    }
    stage('EC2 instance') {
      steps {
        withVault([configuration: configuration, vaultSecrets: secrets]) {
          sh '''
            #!/bin/bash
            cd terraform_pipeline/terraform/
            echo "Intializing terraform"
            terraform init

            if [ ${Terraforn_plan} = true ]; then
              terraform plan -var KEY_NAME="id_rsa" -var PUB_KEY="${PUB_KEY}" -var TAG_INSTANCE="${EC2_tag}" -var management_account_id=809870132669 -var tf_foundation_role=github-tf-foundational-deploy-role -var instance_type="t3a.medium"
            elif [ ${Terraforn_destroy} = true ]; then
              terraform apply -destroy -var KEY_NAME="id_rsa" -var PUB_KEY="${PUB_KEY}" -var TAG_INSTANCE="${EC2_tag}" -var management_account_id=809870132669 -var tf_foundation_role=github-tf-foundational-deploy-role -var instance_type="t3a.medium" -auto-approve
            else
              terraform apply -var KEY_NAME="id_rsa" -var PUB_KEY="${PUB_KEY}" -var TAG_INSTANCE="${EC2_tag}" -var management_account_id=809870132669 -var tf_foundation_role=github-tf-foundational-deploy-role -var instance_type="t3a.medium" -auto-approve
            fi
            '''
        }
      }
   }
    stage('Storing IP address of EC2 instance') {
      when {
        expression {
          params.Store_IP == true
        }
      }
      steps {
        withCredentials([
                [
                    $class: 'VaultTokenCredentialBinding',
                    credentialsId: vault-approle,
                    vaultAddr: 'http://192.168.0.180:8200'
                ]
            ]) 
            {  
              sh'''#!/bin/bash
                  set +x
                  export SECRETS=$(echo $SECRETS | sed s/,/" "/g)
                  vault login -address=$VAULT_ADDR -no-print ${VAULT_TOKEN}
                  vault kv patch ${SH_LOCATION} ${SECRETS}
              '''
            }
      }
   }
 }
}